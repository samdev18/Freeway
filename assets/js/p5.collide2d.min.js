p5.prototype._collideDebug=!1,p5.prototype.collideDebug=function(debugMode){_collideDebug=debugMode},p5.prototype.collideRectRect=function(x,y,w,h,x2,y2,w2,h2){return x+w>=x2&&x<=x2+w2&&y+h>=y2&&y<=y2+h2},p5.prototype.collideRectCircle=function(rx,ry,rw,rh,cx,cy,diameter){var testX=cx,testY=cy,distance;return cx<rx?testX=rx:cx>rx+rw&&(testX=rx+rw),cy<ry?testY=ry:cy>ry+rh&&(testY=ry+rh),this.dist(cx,cy,testX,testY)<=diameter/2},p5.prototype.collideCircleCircle=function(x,y,d,x2,y2,d2){return this.dist(x,y,x2,y2)<=d/2+d2/2},p5.prototype.collidePointCircle=function(x,y,cx,cy,d){return this.dist(x,y,cx,cy)<=d/2},p5.prototype.collidePointEllipse=function(x,y,cx,cy,dx,dy){var rx=dx/2,ry=dy/2;if(x>cx+rx||x<cx-rx||y>cy+ry||y<cy-ry)return!1;var xx=x-cx,yy=y-cy,eyy=ry*this.sqrt(this.abs(rx*rx-xx*xx))/rx;return yy<=eyy&&yy>=-eyy},p5.prototype.collidePointRect=function(pointX,pointY,x,y,xW,yW){return pointX>=x&&pointX<=x+xW&&pointY>=y&&pointY<=y+yW},p5.prototype.collidePointLine=function(px,py,x1,y1,x2,y2,buffer){var d1=this.dist(px,py,x1,y1),d2=this.dist(px,py,x2,y2),lineLen=this.dist(x1,y1,x2,y2);return void 0===buffer&&(buffer=.1),d1+d2>=lineLen-buffer&&d1+d2<=lineLen+buffer},p5.prototype.collideLineCircle=function(x1,y1,x2,y2,cx,cy,diameter){var inside1=this.collidePointCircle(x1,y1,cx,cy,diameter),inside2=this.collidePointCircle(x2,y2,cx,cy,diameter);if(inside1||inside2)return!0;var distX=x1-x2,distY=y1-y2,len=this.sqrt(distX*distX+distY*distY),dot=((cx-x1)*(x2-x1)+(cy-y1)*(y2-y1))/this.pow(len,2),closestX=x1+dot*(x2-x1),closestY=y1+dot*(y2-y1),onSegment,distance;return!!this.collidePointLine(closestX,closestY,x1,y1,x2,y2)&&(this._collideDebug&&this.ellipse(closestX,closestY,10,10),distX=closestX-cx,distY=closestY-cy,this.sqrt(distX*distX+distY*distY)<=diameter/2)},p5.prototype.collideLineLine=function(x1,y1,x2,y2,x3,y3,x4,y4,calcIntersection){var intersection,uA=((x4-x3)*(y1-y3)-(y4-y3)*(x1-x3))/((y4-y3)*(x2-x1)-(x4-x3)*(y2-y1)),uB=((x2-x1)*(y1-y3)-(y2-y1)*(x1-x3))/((y4-y3)*(x2-x1)-(x4-x3)*(y2-y1));if(uA>=0&&uA<=1&&uB>=0&&uB<=1){if(this._collideDebug||calcIntersection)var intersectionX=x1+uA*(x2-x1),intersectionY=y1+uA*(y2-y1);return this._collideDebug&&this.ellipse(intersectionX,intersectionY,10,10),!calcIntersection||(intersection={x:intersectionX,y:intersectionY})}return!!calcIntersection&&(intersection={x:!1,y:!1})},p5.prototype.collideLineRect=function(x1,y1,x2,y2,rx,ry,rw,rh,calcIntersection){var left,right,top,bottom,intersection;return calcIntersection?intersection={left:left=this.collideLineLine(x1,y1,x2,y2,rx,ry,rx,ry+rh,!0),right:right=this.collideLineLine(x1,y1,x2,y2,rx+rw,ry,rx+rw,ry+rh,!0),top:top=this.collideLineLine(x1,y1,x2,y2,rx,ry,rx+rw,ry,!0),bottom:bottom=this.collideLineLine(x1,y1,x2,y2,rx,ry+rh,rx+rw,ry+rh,!0)}:(left=this.collideLineLine(x1,y1,x2,y2,rx,ry,rx,ry+rh),right=this.collideLineLine(x1,y1,x2,y2,rx+rw,ry,rx+rw,ry+rh),top=this.collideLineLine(x1,y1,x2,y2,rx,ry,rx+rw,ry),bottom=this.collideLineLine(x1,y1,x2,y2,rx,ry+rh,rx+rw,ry+rh)),!!(left||right||top||bottom)&&(!calcIntersection||intersection)},p5.prototype.collidePointPoly=function(px,py,vertices){for(var collision=!1,next=0,current=0;current<vertices.length;current++){(next=current+1)==vertices.length&&(next=0);var vc=vertices[current],vn=vertices[next];(vc.y>py&&vn.y<py||vc.y<py&&vn.y>py)&&px<(vn.x-vc.x)*(py-vc.y)/(vn.y-vc.y)+vc.x&&(collision=!collision)}return collision},p5.prototype.collideCirclePoly=function(cx,cy,diameter,vertices,interior){null==interior&&(interior=!1);for(var next=0,current=0,centerInside;current<vertices.length;current++){(next=current+1)==vertices.length&&(next=0);var vc=vertices[current],vn=vertices[next],collision;if(this.collideLineCircle(vc.x,vc.y,vn.x,vn.y,cx,cy,diameter))return!0}if(1==interior&&this.collidePointPoly(cx,cy,vertices))return!0;return!1},p5.prototype.collideRectPoly=function(rx,ry,rw,rh,vertices,interior){null==interior&&(interior=!1);for(var next=0,current=0;current<vertices.length;current++){(next=current+1)==vertices.length&&(next=0);var vc=vertices[current],vn=vertices[next],collision,inside;if(this.collideLineRect(vc.x,vc.y,vn.x,vn.y,rx,ry,rw,rh))return!0;if(1==interior)if(this.collidePointPoly(rx,ry,vertices))return!0}return!1},p5.prototype.collideLinePoly=function(x1,y1,x2,y2,vertices){for(var next=0,current=0;current<vertices.length;current++){(next=current+1)==vertices.length&&(next=0);var x3=vertices[current].x,y3=vertices[current].y,x4=vertices[next].x,y4=vertices[next].y,hit;if(this.collideLineLine(x1,y1,x2,y2,x3,y3,x4,y4))return!0}return!1},p5.prototype.collidePolyPoly=function(p1,p2,interior){null==interior&&(interior=!1);for(var next=0,current=0;current<p1.length;current++){(next=current+1)==p1.length&&(next=0);var vc=p1[current],vn=p1[next],collision=this.collideLinePoly(vc.x,vc.y,vn.x,vn.y,p2);if(collision)return!0;if(1==interior&&(collision=this.collidePointPoly(p2[0].x,p2[0].y,p1)))return!0}return!1},p5.prototype.collidePointTriangle=function(px,py,x1,y1,x2,y2,x3,y3){var areaOrig=this.abs((x2-x1)*(y3-y1)-(x3-x1)*(y2-y1)),area1,area2,area3;return this.abs((x1-px)*(y2-py)-(x2-px)*(y1-py))+this.abs((x2-px)*(y3-py)-(x3-px)*(y2-py))+this.abs((x3-px)*(y1-py)-(x1-px)*(y3-py))==areaOrig},p5.prototype.collidePointPoint=function(x,y,x2,y2,buffer){return null==buffer&&(buffer=0),this.dist(x,y,x2,y2)<=buffer},p5.prototype.collidePointArc=function(px,py,ax,ay,arcRadius,arcHeading,arcAngle,buffer){null==buffer&&(buffer=0);var point=this.createVector(px,py),arcPos=this.createVector(ax,ay),radius=this.createVector(arcRadius,0).rotate(arcHeading),pointToArc=point.copy().sub(arcPos);if(point.dist(arcPos)<=arcRadius+buffer){var dot=radius.dot(pointToArc),angle=radius.angleBetween(pointToArc);if(dot>0&&angle<=arcAngle/2&&angle>=-arcAngle/2)return!0}return!1};